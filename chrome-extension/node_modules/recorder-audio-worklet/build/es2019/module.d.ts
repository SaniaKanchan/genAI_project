import { isSupported } from 'worker-factory';
export * from 'recorder-audio-worklet/src/interfaces';
export * from 'recorder-audio-worklet/src/types';
export declare const addRecorderAudioWorkletModule: (addAudioWorkletModule: (url: string) => Promise<void>) => Promise<void>;
export declare const createRecorderAudioWorkletNode: <T extends import("standardized-audio-context").TContext | import("standardized-audio-context").TNativeContext>(audioWorkletNodeConstructor: T extends import("standardized-audio-context").TContext ? import("standardized-audio-context").TAudioWorkletNodeConstructor : {
    new (context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions | undefined): AudioWorkletNode;
    prototype: AudioWorkletNode;
}, context: T, options?: Partial<import("recorder-audio-worklet/src/types/any-recorder-audio-worklet-node-options").TAnyRecorderAudioWorkletNodeOptions<T>>) => T extends import("standardized-audio-context").TContext ? import("recorder-audio-worklet/src/interfaces/recorder-audio-worklet-node").IRecorderAudioWorkletNode<T> : import("recorder-audio-worklet/src/interfaces/native-recorder-audio-worklet-node").INativeRecorderAudioWorkletNode;
export { isSupported };
//# sourceMappingURL=module.d.ts.map